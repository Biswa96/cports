From d32a173a8667ed7e92e5994c037640b4aed334f5 Mon Sep 17 00:00:00 2001
From: q66 <q66@chimera-linux.org>
Date: Fri, 30 May 2025 12:33:02 +0200
Subject: [PATCH 02/15] remove a bunch of unused junk

---
 compiler/rustc_target/src/spec/crt_objects.rs |  22 ----
 src/bootstrap/configure.py                    | 100 ------------------
 src/bootstrap/src/core/build_steps/compile.rs |  58 +---------
 src/bootstrap/src/core/build_steps/llvm.rs    |   3 -
 src/bootstrap/src/core/config/config.rs       |   2 -
 .../src/core/config/target_selection.rs       |   4 -
 src/bootstrap/src/core/config/toml/rust.rs    |   4 -
 src/bootstrap/src/core/config/toml/target.rs  |   6 --
 src/bootstrap/src/core/sanity.rs              |  16 ---
 src/bootstrap/src/lib.rs                      |  29 -----
 src/bootstrap/src/utils/cc_detect.rs          |  24 -----
 11 files changed, 1 insertion(+), 267 deletions(-)

diff --git a/compiler/rustc_target/src/spec/crt_objects.rs b/compiler/rustc_target/src/spec/crt_objects.rs
index e3b6430a4..13a96e2cb 100644
--- a/compiler/rustc_target/src/spec/crt_objects.rs
+++ b/compiler/rustc_target/src/spec/crt_objects.rs
@@ -62,28 +62,6 @@ pub(super) fn all(obj: &'static str) -> CrtObjects {
     ])
 }
 
-pub(super) fn pre_musl_self_contained() -> CrtObjects {
-    new(&[
-        (LinkOutputKind::DynamicNoPicExe, &["crt1.o", "crti.o", "crtbegin.o"]),
-        (LinkOutputKind::DynamicPicExe, &["Scrt1.o", "crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::StaticNoPicExe, &["crt1.o", "crti.o", "crtbegin.o"]),
-        (LinkOutputKind::StaticPicExe, &["rcrt1.o", "crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::DynamicDylib, &["crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::StaticDylib, &["crti.o", "crtbeginS.o"]),
-    ])
-}
-
-pub(super) fn post_musl_self_contained() -> CrtObjects {
-    new(&[
-        (LinkOutputKind::DynamicNoPicExe, &["crtend.o", "crtn.o"]),
-        (LinkOutputKind::DynamicPicExe, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::StaticNoPicExe, &["crtend.o", "crtn.o"]),
-        (LinkOutputKind::StaticPicExe, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::DynamicDylib, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::StaticDylib, &["crtendS.o", "crtn.o"]),
-    ])
-}
-
 pub(super) fn pre_mingw_self_contained() -> CrtObjects {
     new(&[
         (LinkOutputKind::DynamicNoPicExe, &["crt2.o", "rsbegin.o"]),
diff --git a/src/bootstrap/configure.py b/src/bootstrap/configure.py
index b05a5cc8b..e75802e0a 100755
--- a/src/bootstrap/configure.py
+++ b/src/bootstrap/configure.py
@@ -180,106 +180,6 @@ v("llvm-config", None, "set path to llvm-config")
 v("llvm-filecheck", None, "set path to LLVM's FileCheck utility")
 v("python", "build.python", "set path to python")
 v("android-ndk", "build.android-ndk", "set path to Android NDK")
-v(
-    "musl-root",
-    "target.x86_64-unknown-linux-musl.musl-root",
-    "MUSL root installation directory (deprecated)",
-)
-v(
-    "musl-root-x86_64",
-    "target.x86_64-unknown-linux-musl.musl-root",
-    "x86_64-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-i586",
-    "target.i586-unknown-linux-musl.musl-root",
-    "i586-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-i686",
-    "target.i686-unknown-linux-musl.musl-root",
-    "i686-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-arm",
-    "target.arm-unknown-linux-musleabi.musl-root",
-    "arm-unknown-linux-musleabi install directory",
-)
-v(
-    "musl-root-armhf",
-    "target.arm-unknown-linux-musleabihf.musl-root",
-    "arm-unknown-linux-musleabihf install directory",
-)
-v(
-    "musl-root-armv5te",
-    "target.armv5te-unknown-linux-musleabi.musl-root",
-    "armv5te-unknown-linux-musleabi install directory",
-)
-v(
-    "musl-root-armv7",
-    "target.armv7-unknown-linux-musleabi.musl-root",
-    "armv7-unknown-linux-musleabi install directory",
-)
-v(
-    "musl-root-armv7hf",
-    "target.armv7-unknown-linux-musleabihf.musl-root",
-    "armv7-unknown-linux-musleabihf install directory",
-)
-v(
-    "musl-root-aarch64",
-    "target.aarch64-unknown-linux-musl.musl-root",
-    "aarch64-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-mips",
-    "target.mips-unknown-linux-musl.musl-root",
-    "mips-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-mipsel",
-    "target.mipsel-unknown-linux-musl.musl-root",
-    "mipsel-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-mips64",
-    "target.mips64-unknown-linux-muslabi64.musl-root",
-    "mips64-unknown-linux-muslabi64 install directory",
-)
-v(
-    "musl-root-mips64el",
-    "target.mips64el-unknown-linux-muslabi64.musl-root",
-    "mips64el-unknown-linux-muslabi64 install directory",
-)
-v(
-    "musl-root-powerpc64",
-    "target.powerpc64-unknown-linux-musl.musl-root",
-    "powerpc64-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-powerpc64le",
-    "target.powerpc64le-unknown-linux-musl.musl-root",
-    "powerpc64le-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-riscv32gc",
-    "target.riscv32gc-unknown-linux-musl.musl-root",
-    "riscv32gc-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-riscv64gc",
-    "target.riscv64gc-unknown-linux-musl.musl-root",
-    "riscv64gc-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-loongarch64",
-    "target.loongarch64-unknown-linux-musl.musl-root",
-    "loongarch64-unknown-linux-musl install directory",
-)
-v(
-    "musl-root-wali-wasm32",
-    "target.wasm32-wali-linux-musl.musl-root",
-    "wasm32-wali-linux-musl install directory",
-)
 v(
     "qemu-armhf-rootfs",
     "target.arm-unknown-linux-gnueabihf.qemu-rootfs",
diff --git a/src/bootstrap/src/core/build_steps/compile.rs b/src/bootstrap/src/core/build_steps/compile.rs
index 30cbcc05c..c105794fd 100644
--- a/src/bootstrap/src/core/build_steps/compile.rs
+++ b/src/bootstrap/src/core/build_steps/compile.rs
@@ -375,54 +375,7 @@ fn copy_self_contained_objects(
     t!(fs::create_dir_all(&libdir_self_contained));
     let mut target_deps = vec![];
 
-    // Copies the libc and CRT objects.
-    //
-    // rustc historically provides a more self-contained installation for musl targets
-    // not requiring the presence of a native musl toolchain. For example, it can fall back
-    // to using gcc from a glibc-targeting toolchain for linking.
-    // To do that we have to distribute musl startup objects as a part of Rust toolchain
-    // and link with them manually in the self-contained mode.
-    if target.needs_crt_begin_end() {
-        let srcdir = builder.musl_libdir(target).unwrap_or_else(|| {
-            panic!("Target {:?} does not have a \"musl-libdir\" key", target.triple)
-        });
-        if !target.starts_with("wasm32") {
-            for &obj in &["libc.a", "crt1.o", "Scrt1.o", "rcrt1.o", "crti.o", "crtn.o"] {
-                copy_and_stamp(
-                    builder,
-                    &libdir_self_contained,
-                    &srcdir,
-                    obj,
-                    &mut target_deps,
-                    DependencyType::TargetSelfContained,
-                );
-            }
-            let crt_path = builder.ensure(llvm::CrtBeginEnd { target });
-            for &obj in &["crtbegin.o", "crtbeginS.o", "crtend.o", "crtendS.o"] {
-                let src = crt_path.join(obj);
-                let target = libdir_self_contained.join(obj);
-                builder.copy_link(&src, &target, FileType::NativeLibrary);
-                target_deps.push((target, DependencyType::TargetSelfContained));
-            }
-        } else {
-            // For wasm32 targets, we need to copy the libc.a and crt1-command.o files from the
-            // musl-libdir, but we don't need the other files.
-            for &obj in &["libc.a", "crt1-command.o"] {
-                copy_and_stamp(
-                    builder,
-                    &libdir_self_contained,
-                    &srcdir,
-                    obj,
-                    &mut target_deps,
-                    DependencyType::TargetSelfContained,
-                );
-            }
-        }
-        if !target.starts_with("s390x") {
-            let libunwind_path = copy_llvm_libunwind(builder, target, &libdir_self_contained);
-            target_deps.push((libunwind_path, DependencyType::TargetSelfContained));
-        }
-    } else if target.contains("-wasi") {
+    if target.contains("-wasi") {
         let srcdir = builder.wasi_libdir(target).unwrap_or_else(|| {
             panic!(
                 "Target {:?} does not have a \"wasi-root\" key in bootstrap.toml \
@@ -623,15 +576,6 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car
             .arg("--manifest-path")
             .arg(builder.src.join("library/sysroot/Cargo.toml"));
 
-        // Help the libc crate compile by assisting it in finding various
-        // sysroot native libraries.
-        if target.contains("musl")
-            && let Some(p) = builder.musl_libdir(target)
-        {
-            let root = format!("native={}", p.to_str().unwrap());
-            cargo.rustflag("-L").rustflag(&root);
-        }
-
         if target.contains("-wasi")
             && let Some(dir) = builder.wasi_libdir(target)
         {
diff --git a/src/bootstrap/src/core/build_steps/llvm.rs b/src/bootstrap/src/core/build_steps/llvm.rs
index 8191a77b5..551715338 100644
--- a/src/bootstrap/src/core/build_steps/llvm.rs
+++ b/src/bootstrap/src/core/build_steps/llvm.rs
@@ -1322,9 +1322,6 @@ impl Step for CrtBeginEnd {
     }
 
     fn make_run(run: RunConfig<'_>) {
-        if run.target.needs_crt_begin_end() {
-            run.builder.ensure(CrtBeginEnd { target: run.target });
-        }
     }
 
     /// Build crtbegin.o/crtend.o for musl target.
diff --git a/src/bootstrap/src/core/config/config.rs b/src/bootstrap/src/core/config/config.rs
index 6055876c4..a3ff1aff6 100644
--- a/src/bootstrap/src/core/config/config.rs
+++ b/src/bootstrap/src/core/config/config.rs
@@ -254,8 +254,6 @@ pub struct Config {
     pub print_step_timings: bool,
     pub print_step_rusage: bool,
 
-    // Fallback musl-root for all targets
-    pub musl_root: Option<PathBuf>,
     pub prefix: Option<PathBuf>,
     pub sysconfdir: Option<PathBuf>,
     pub datadir: Option<PathBuf>,
diff --git a/src/bootstrap/src/core/config/target_selection.rs b/src/bootstrap/src/core/config/target_selection.rs
index ebd3fe7a8..ea0e26d2d 100644
--- a/src/bootstrap/src/core/config/target_selection.rs
+++ b/src/bootstrap/src/core/config/target_selection.rs
@@ -92,10 +92,6 @@ impl TargetSelection {
         env::var("OSTYPE").is_ok_and(|v| v.to_lowercase().contains("cygwin"))
     }
 
-    pub fn needs_crt_begin_end(&self) -> bool {
-        self.contains("musl") && !self.contains("unikraft")
-    }
-
     /// Path to the file defining the custom target, if any.
     pub fn filepath(&self) -> Option<&Path> {
         self.file.as_ref().map(Path::new)
diff --git a/src/bootstrap/src/core/config/toml/rust.rs b/src/bootstrap/src/core/config/toml/rust.rs
index 03da993a1..7475335ac 100644
--- a/src/bootstrap/src/core/config/toml/rust.rs
+++ b/src/bootstrap/src/core/config/toml/rust.rs
@@ -38,7 +38,6 @@ define_config! {
         incremental: Option<bool> = "incremental",
         default_linker: Option<String> = "default-linker",
         channel: Option<String> = "channel",
-        musl_root: Option<String> = "musl-root",
         rpath: Option<bool> = "rpath",
         strip: Option<bool> = "strip",
         frame_pointers: Option<bool> = "frame-pointers",
@@ -338,7 +337,6 @@ pub fn check_incompatible_options_for_ci_rustc(
         debuginfo_level_tools: _,
         debuginfo_level_tests: _,
         backtrace: _,
-        musl_root: _,
         verbose_tests: _,
         optimize_tests: _,
         codegen_tests: _,
@@ -488,7 +486,6 @@ impl Config {
                 randomize_layout,
                 default_linker,
                 channel: _, // already handled above
-                musl_root,
                 rpath,
                 verbose_tests,
                 optimize_tests,
@@ -602,7 +599,6 @@ impl Config {
 
             self.llvm_enzyme = self.channel == "dev" || self.channel == "nightly";
             self.rustc_default_linker = default_linker;
-            self.musl_root = musl_root.map(PathBuf::from);
             self.save_toolstates = save_toolstates.map(PathBuf::from);
             set(
                 &mut self.deny_warnings,
diff --git a/src/bootstrap/src/core/config/toml/target.rs b/src/bootstrap/src/core/config/toml/target.rs
index 9dedadff3..cd243d059 100644
--- a/src/bootstrap/src/core/config/toml/target.rs
+++ b/src/bootstrap/src/core/config/toml/target.rs
@@ -38,8 +38,6 @@ define_config! {
         profiler: Option<StringOrBool> = "profiler",
         rpath: Option<bool> = "rpath",
         crt_static: Option<bool> = "crt-static",
-        musl_root: Option<String> = "musl-root",
-        musl_libdir: Option<String> = "musl-libdir",
         wasi_root: Option<String> = "wasi-root",
         qemu_rootfs: Option<String> = "qemu-rootfs",
         no_std: Option<bool> = "no-std",
@@ -70,8 +68,6 @@ pub struct Target {
     pub profiler: Option<StringOrBool>,
     pub rpath: Option<bool>,
     pub crt_static: Option<bool>,
-    pub musl_root: Option<PathBuf>,
-    pub musl_libdir: Option<PathBuf>,
     pub wasi_root: Option<PathBuf>,
     pub qemu_rootfs: Option<PathBuf>,
     pub runner: Option<String>,
@@ -132,8 +128,6 @@ impl Config {
                 target.ranlib = cfg.ranlib.map(PathBuf::from);
                 target.linker = cfg.linker.map(PathBuf::from);
                 target.crt_static = cfg.crt_static;
-                target.musl_root = cfg.musl_root.map(PathBuf::from);
-                target.musl_libdir = cfg.musl_libdir.map(PathBuf::from);
                 target.wasi_root = cfg.wasi_root.map(PathBuf::from);
                 target.qemu_rootfs = cfg.qemu_rootfs.map(PathBuf::from);
                 target.runner = cfg.runner;
diff --git a/src/bootstrap/src/core/sanity.rs b/src/bootstrap/src/core/sanity.rs
index 15e04f591..38c877699 100644
--- a/src/bootstrap/src/core/sanity.rs
+++ b/src/bootstrap/src/core/sanity.rs
@@ -336,22 +336,6 @@ than building it.
             continue;
         }
 
-        // Make sure musl-root is valid.
-        if target.contains("musl") && !target.contains("unikraft") {
-            match build.musl_libdir(*target) {
-                Some(libdir) => {
-                    if fs::metadata(libdir.join("libc.a")).is_err() {
-                        panic!("couldn't find libc.a in musl libdir: {}", libdir.display());
-                    }
-                }
-                None => panic!(
-                    "when targeting MUSL either the rust.musl-root \
-                            option or the target.$TARGET.musl-root option must \
-                            be specified in bootstrap.toml"
-                ),
-            }
-        }
-
         if need_cmake && target.is_msvc() {
             // There are three builds of cmake on windows: MSVC, MinGW, and
             // Cygwin. The Cygwin build does not have generators for Visual
diff --git a/src/bootstrap/src/lib.rs b/src/bootstrap/src/lib.rs
index 011b52df9..35e369c29 100644
--- a/src/bootstrap/src/lib.rs
+++ b/src/bootstrap/src/lib.rs
@@ -1369,35 +1369,6 @@ impl Build {
         }
     }
 
-    /// Returns the "musl root" for this `target`, if defined.
-    ///
-    /// If this is a native target (host is also musl) and no musl-root is given,
-    /// it falls back to the system toolchain in /usr.
-    fn musl_root(&self, target: TargetSelection) -> Option<&Path> {
-        let configured_root = self
-            .config
-            .target_config
-            .get(&target)
-            .and_then(|t| t.musl_root.as_ref())
-            .or(self.config.musl_root.as_ref())
-            .map(|p| &**p);
-
-        if self.config.is_host_target(target) && configured_root.is_none() {
-            Some(Path::new("/usr"))
-        } else {
-            configured_root
-        }
-    }
-
-    /// Returns the "musl libdir" for this `target`.
-    fn musl_libdir(&self, target: TargetSelection) -> Option<PathBuf> {
-        self.config
-            .target_config
-            .get(&target)
-            .and_then(|t| t.musl_libdir.clone())
-            .or_else(|| self.musl_root(target).map(|root| root.join("lib")))
-    }
-
     /// Returns the `lib` directory for the WASI target specified, if
     /// configured.
     ///
diff --git a/src/bootstrap/src/utils/cc_detect.rs b/src/bootstrap/src/utils/cc_detect.rs
index d3926df96..7d03d8730 100644
--- a/src/bootstrap/src/utils/cc_detect.rs
+++ b/src/bootstrap/src/utils/cc_detect.rs
@@ -195,30 +195,6 @@ fn default_compiler(
             }
         }
 
-        "mips-unknown-linux-musl" if compiler == Language::C => {
-            if cfg.get_compiler().path().to_str() == Some("gcc") {
-                Some(PathBuf::from("mips-linux-musl-gcc"))
-            } else {
-                None
-            }
-        }
-        "mipsel-unknown-linux-musl" if compiler == Language::C => {
-            if cfg.get_compiler().path().to_str() == Some("gcc") {
-                Some(PathBuf::from("mipsel-linux-musl-gcc"))
-            } else {
-                None
-            }
-        }
-
-        t if t.contains("musl") && compiler == Language::C => {
-            if let Some(root) = build.musl_root(target) {
-                let guess = root.join("bin/musl-gcc");
-                if guess.exists() { Some(guess) } else { None }
-            } else {
-                None
-            }
-        }
-
         t if t.contains("-wasi") => {
             let root = if let Some(path) = build.wasi_sdk_path.as_ref() {
                 path
-- 
2.51.1

